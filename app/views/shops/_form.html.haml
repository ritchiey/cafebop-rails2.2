-content_for :head do
  :javascript 
  
    google.load("maps", "2");
    google.setOnLoadCallback(initialize_shop_form_map);
    
    $(function() { // page ready   


      $('#shop_street_address').change(function(e) { 
        var address = $('#shop_street_address').val();
        if ($('#shop_postal_address').val() == "") {
          $('#shop_postal_address').val(address);
        }
        geocode(address, $('#shop_name').val());
      })
      
      function populateField(selector, value) {
        field = $(selector)
        if (field.val() == "") {
          field.val(value);
        } 
      }
      
      $('#shop_name').change(function(e) {
        //populateField("#shop_permalink", toPermalink($(this).val()));
        populateField("#shop_website", toShopUrl($(this).val()));
      })
      
      $('#shop_permalink').change(function(e) {
        populateField("#shop_website", toShopUrl($(this).val()));
      })
      

    })

-semantic_form_for @shop, :html=>{:multipart=>true} do |f|
  -f.inputs do
    / -if @shop.new_record?
    /   =f.input :permalink, :hint=>"Unique name, no spaces. Can't be changed"  
    -f.inputs :name=>"Contact Details", :id=>:contact, :class=>'bordered' do
      =f.input :name, :hint=>"Restaurant's title as it will appear at top of page"
      =f.input :street_address, :hint=>"Physical location of the restaurant"
      =f.input :lat, :as=>:hidden
      =f.input :lng, :as=>:hidden 
      =f.input :postal_address, :hint=>"For snail mail"
      =f.input :email_address, :hint=>"For enquiries or bookings"
      =f.input :website, :hint=>"If one exists"
      =f.input :phone, :hint=>"To call for bookings"
      =f.input :fax, :hint=>"If available"
    -if current_user and current_user.is_admin?
      -f.inputs :name=>"Advanced", :id=>:advanced, :class=>'bordered' do
        =f.input :manager_email, :hint=>"Assign this user as the manager of the shop"
        =f.input :permalink, :hint=>"This shops unique identifier as used in their URL"
    / =f.input :fee_threshold, :hint=>"Customer must pay the transaction fees on orders less than this amount"
    -f.inputs :name=>"Theme", :id=>:theme, :class=>'bordered' do
      =f.input :header_background, :hint=>"Upload an image to appear above the shop's menu"
      =f.input :display_name, :hint=>"Uncheck if your header background includes the name"
      =f.input :border_background, :hint=>"Upload an image to appear around the shop's menu"
      =f.input :tile_border, :hint=>"Repeat the border image"
    -f.inputs :name=>"Cuisine", :id=>:cuisine, :class=>'bordered' do
      =f.input :franchise, :hint=>"Does the shop belong to one of these franchises?", :collection=>Cuisine.is_franchise
      =f.input :cuisines, :as=>:check_boxes, :hint=>"What are your specialities", :collection=>Cuisine.is_not_franchise
    -f.inputs :name=>"Menus", :id=>:menu_details, :class=>'bordered' do
      =f.input :menu_data, :as=>:text, :hint=>"Import menus: menu_name, item_name, description, price(s), flavour(s)"
    -f.inputs :name=>"Ordering", :id=>:ordering, :class=>'bordered' do
      =f.input :refund_policy, :hint=>"A link to this will appear at the bottom of your menu"
    
  =f.buttons
  
-content_for :aside do
  #map(style="width: 310px; height:500px")
